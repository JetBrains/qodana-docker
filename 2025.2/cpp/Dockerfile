# This file was generated by https://github.com/JetBrains/qodana-docker/blob/main/dockerfiles.py. DO NOT EDIT MANUALLY.

ARG BASE_TAG="bookworm-slim"
ARG NODE_TAG="22-bookworm-slim"
FROM node:$NODE_TAG AS node_base
ARG BASE_TAG="bookworm-slim"
FROM debian:$BASE_TAG
ARG CLANG="16"

ENV HOME="/root" \
    LC_ALL="en_US.UTF-8" \
    QODANA_DIST="/opt/idea" \
    QODANA_DATA="/data" \
    QODANA_DOCKER="true"

ENV JAVA_HOME="$QODANA_DIST/jbr" \
    QODANA_CONF="$HOME/.config/idea" \
    PATH="/opt/qodana:$QODANA_DIST/bin:${PATH}"

ENV CXX="/usr/lib/llvm-$CLANG/bin/clang++" \
    CC="/usr/lib/llvm-$CLANG/bin/clang" \
    CPLUS_INCLUDE_PATH="/usr/lib/clang/$CLANG/include"

# hadolint ignore=SC2174,DL3009
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean && \
    mkdir -m 777 -p /opt/qodana $QODANA_DATA/project $QODANA_DATA/cache $QODANA_DATA/results && apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        default-jre \
        git \
        git-lfs \
        gnupg2 \
        apt-transport-https \
        autoconf \
        automake \
        cmake \
        dpkg-dev \
        file \
        make \
        patch \
        libc6-dev \
        locales && \
    echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen && locale-gen && \
    apt-get autoremove -y && apt-get clean && \
    chmod 777 -R $HOME && \
    echo 'root:x:0:0:root:/root:/bin/bash' > /etc/passwd && chmod 666 /etc/passwd && \
    git config --global --add safe.directory '*'

RUN echo "deb https://apt.llvm.org/bookworm/ llvm-toolchain-bookworm-${CLANG} main" > /etc/apt/sources.list.d/llvm.list && \
    curl -s https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor > /etc/apt/trusted.gpg.d/llvm.gpg && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "15CF4D18AF4F7421" && \
    apt-get -qq update && \
    apt-get install -qqy -t \
      llvm-toolchain-bookworm-$CLANG \
      clang-$CLANG \
      clang-tidy-$CLANG \
      clang-format-$CLANG \
      lld-$CLANG \
      libc++-$CLANG-dev \
      libc++abi-$CLANG-dev && \
    for f in /usr/lib/llvm-$CLANG/bin/*; do ln -sf "$f" /usr/bin; done && \
    ln -sf clang /usr/bin/cc && \
    ln -sf clang /usr/bin/c89 && \
    ln -sf clang /usr/bin/c99 && \
    ln -sf clang++ /usr/bin/c++ && \
    ln -sf clang++ /usr/bin/g++ && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get autoremove -y && apt-get clean

# renovate: datasource=npm depName=eslint
ENV ESLINT_VERSION="9.31.0"
# renovate: datasource=npm depName=pnpm
ENV PNPM_VERSION="10.13.1"

ENV PATH="/opt/yarn/bin:$PATH"
ENV SKIP_YARN_COREPACK_CHECK=0
COPY --from=node_base /usr/local/bin/node /usr/local/bin/
COPY --from=node_base /usr/local/include/node /usr/local/include/node
COPY --from=node_base /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=node_base /opt/yarn-* /opt/yarn/
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && \
    ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx && \
    ln -s /usr/local/lib/node_modules/corepack/dist/corepack.js /usr/local/bin/corepack && \
    node --version && \
    npm --version && \
    yarn --version && \
    npm install -g eslint@$ESLINT_VERSION pnpm@$PNPM_VERSION && npm config set update-notifier false && \
    chmod 777 -R "$HOME/.npm" "$HOME/.npmrc" && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        jq && \
    apt-get autoremove -y && apt-get clean

ARG QD_RELEASE=""
ENV QD_VERSION="2025.2" QD_IMAGE="cpp"
ARG QD_CODE="QDCPP"
# hadolint ignore=DL3003,SC2043
RUN set -ex && \
    dpkgArch="$(dpkg --print-architecture)" && \
    case "$dpkgArch" in \
        "amd64") \
            OS_ARCH_SUFFIX=""; \
            RELEASES_DIST_KEY="linux"; \
            ;; \
        "arm64") \
            OS_ARCH_SUFFIX="-aarch64"; \
            RELEASES_DIST_KEY="linuxARM64"; \
            ;; \
        *) echo "Unsupported architecture $dpkgArch" >&2; exit 1 ;; \
    esac && \
    if [ -z "$QD_RELEASE" ]; then \
        case "$QD_CODE" in \
            "QDNET") \
                RELEASE_CODE="RD"; \
                ;; \
            "QDGO") \
                RELEASE_CODE="GO"; \
                ;; \
            "QDJS") \
                RELEASE_CODE="WS"; \
                ;; \
            "QDJVM" | "QDAND") \
                RELEASE_CODE="IIU"; \
                ;; \
            "QDJVMC" | "QDANDC") \
                RELEASE_CODE="IIC"; \
                ;; \
            "QDPHP") \
                RELEASE_CODE="PS"; \
                ;; \
            "QDPY") \
                RELEASE_CODE="PCP"; \
                ;; \
            "QDPYC") \
                RELEASE_CODE="PCC"; \
                ;; \
            "QDCPP") \
                RELEASE_CODE="CL"; \
                ;; \
            "QDRUBY") \
                RELEASE_CODE="RM"; \
                ;; \
            *) echo "Unrecognized product code $QD_CODE" >&2; exit 1 ;; \
        esac && \
        RELEASE_JSON=$(\
            curl https://raw.githubusercontent.com/JetBrains/qodana-docker/refs/heads/main/feed/releases.json |\
            jq "[\
                .[] |\
                select(.Code==\"$RELEASE_CODE\") |\
                .Releases |\
                sort_by(.Type, .Date) |\
                .[] |\
                select(.MajorVersion==\"$QD_VERSION\")\
            ] | .[-1]" \
        ) && \
        if [ "$RELEASE_JSON" = "null" ]; then \
            echo "No release found for $RELEASE_CODE ($QD_CODE) $QD_VERSION in https://raw.githubusercontent.com/JetBrains/qodana-docker/refs/heads/main/feed/releases.json" \
                >&2 && exit 1; \
        fi && \
        QD_BUILD="$QD_CODE-$(echo "$RELEASE_JSON" | jq -r '.Build')" && \
        QD_NAME="qodana-$QD_BUILD$OS_ARCH_SUFFIX" && \
        QD_URL=$(echo "$RELEASE_JSON" | jq -r ".Downloads.$RELEASES_DIST_KEY.Link") && \
        QD_CHECKSUM_URL=$(echo "$RELEASE_JSON" | jq -r ".Downloads.$RELEASES_DIST_KEY.ChecksumLink"); \
    else \
        QD_BUILD="$QD_CODE-$QD_RELEASE" && \
        QD_NAME="qodana-$QD_RELEASE$OS_ARCH_SUFFIX" && \
        QD_URL="https://download.jetbrains.com/qodana/$QD_VERSION/$QD_NAME.tar.gz" && \
        QD_CHECKSUM_URL="$QD_URL.sha256"; \
    fi && \
    curl -fsSL "$QD_URL" -o "/tmp/$QD_NAME.tar.gz" \
               "$QD_CHECKSUM_URL" -o "/tmp/$QD_NAME.tar.gz.sha256" \
               "$QD_CHECKSUM_URL.asc" -o "/tmp/$QD_NAME.tar.gz.sha256.asc" && \
    GNUPGHOME="$(mktemp -d)" && \
    export GNUPGHOME && \
    for key in \
        "B46DC71E03FEEB7F89D1F2491F7A8F87B9D8F501" \
      ; do \
        gpg --batch --keyserver "hkps://keys.openpgp.org" --recv-keys "$key" || \
        gpg --batch --keyserver "keyserver.ubuntu.com" --recv-keys "$key" ; \
    done && \
    gpg --verify "/tmp/$QD_NAME.tar.gz.sha256.asc" "/tmp/$QD_NAME.tar.gz.sha256" && \
    echo "$(cat "/tmp/$QD_NAME.tar.gz.sha256" | awk '{ print $1 }') */tmp/$QD_NAME.tar.gz" |\
        sha256sum --check && \
    mkdir -p /tmp/qd && tar -xzf "/tmp/$QD_NAME.tar.gz" --directory /tmp/qd  && \
    mv /tmp/qd/qodana-QD* "$QODANA_DIST" && \
    chmod +x "$QODANA_DIST"/bin/*.sh "$QODANA_DIST"/bin/qodana && \
    update-alternatives --install /usr/bin/java java "$JAVA_HOME/bin/java" 0 && \
    update-alternatives --install /usr/bin/javac javac "$JAVA_HOME/bin/javac" 0 && \
    update-alternatives --set java "$JAVA_HOME/bin/java" && \
    update-alternatives --set javac "$JAVA_HOME/bin/javac" && \
    apt-get purge --auto-remove -y gnupg2 && \
    rm -rf /var/cache/apt /var/lib/apt/ /tmp/* "$GNUPGHOME"

ARG PRIVILEGED="false"
ARG SUDO_SHA256="7b8c75a374a81689a1082044bada5e6e46597d3c5f4d13c19d841746520cfcb6"
RUN if [ "$PRIVILEGED" = "true" ]; then \
        apt-get update && \
        apt-get install -y sudo && \
        useradd -m -u 1001 -U qodana && \
        passwd -d qodana && \
        echo 'qodana ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
        chmod 777 /etc/passwd && \
        rm -rf /var/cache/apt /var/lib/apt/ /tmp/*; \
    else \
        curl -fsSL "https://raw.githubusercontent.com/JetBrains/qodana-docker/refs/heads/main/sudo" -o /usr/bin/sudo && \
        echo "${SUDO_SHA256} /usr/bin/sudo" > /tmp/sudo.shasum && \
        sha256sum --check --status /tmp/sudo.shasum && \
        chmod +x /usr/bin/sudo; \
    fi

LABEL maintainer="qodana-support@jetbrains.com" description="Qodana for C++ (https://jb.gg/qodana-cpp)"
WORKDIR /data/project
ENTRYPOINT ["/opt/idea/bin/qodana"]